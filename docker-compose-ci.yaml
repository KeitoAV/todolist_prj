version: "3.9"

services:
  front:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api

    ports:
      - "80:80"

  api:
    image: ekaterinavvv/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    ports:
      - "8000:8000"
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      TG_TOKEN: ${TG_TOKEN}
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  migrations:
    image: ekaterinavvv/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      TG_TOKEN: ${TG_TOKEN}

    depends_on:
      db:
        condition: service_healthy
    command: python manage.py migrate

  db:
    image: postgres:12.4-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $DB_USER" ]
      timeout: 5s
      interval: 5s
      retries: 5
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

  bot:
    image: ekaterinavvv/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      TG_TOKEN: ${TG_TOKEN}
    restart: always
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./.env:/code/.env
    command: python manage.py runbot



